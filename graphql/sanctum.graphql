type User {
    id: ID!
    name: String!
    email: String!
}

type AccessToken {
    token: String!
}

input LoginInput {
    email: String! @rules(apply: ["required", "email"])
    password: String! @rules(apply: ["required", "string"])
}

type LogoutResponse {
    status: LogoutStatus!
    message: String!
}

type RegisterResponse {
    token: String
    status: RegisterStatus!
}

type EmailVerificationResponse {
    status: EmailVerificationStatus!
}

input VerifyEmailInput {
    id: ID! @rules(apply: ["required", "exists:users,id"])
    hash: String! @rules(apply: ["required", "string"])
}

input RegisterInput {
    name: String! @rules(apply: ["required", "string"])
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    password: String! @rules(apply: ["required", "confirmed"])
    password_confirmation: String! @rules(apply: ["required", "string"])
    verification_url: String @rules(apply: ["url"])
}

extend type Mutation {
    login(input: LoginInput @spread): AccessToken!
        @field(resolver: "DanielDeWit\\LighthouseSanctum\\GraphQL\\Mutations\\Login")
    logout: LogoutResponse! @guard
        @field(resolver: "DanielDeWit\\LighthouseSanctum\\GraphQL\\Mutations\\Logout")
    register(input: RegisterInput @spread): RegisterResponse!
        @field(resolver: "DanielDeWit\\LighthouseSanctum\\GraphQL\\Mutations\\Register")
    verifyEmail(input: VerifyEmailInput! @spread): EmailVerificationResponse!
        @field(resolver: "DanielDeWit\\LighthouseSanctum\\GraphQL\\Mutations\\VerifyEmail")
}
